// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: ipc.proto

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IngressHandler_GetPProf_FullMethodName         = "/ipc.IngressHandler/GetPProf"
	IngressHandler_UpdateMediaStats_FullMethodName = "/ipc.IngressHandler/UpdateMediaStats"
)

// IngressHandlerClient is the client API for IngressHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressHandlerClient interface {
	GetPProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfResponse, error)
	UpdateMediaStats(ctx context.Context, in *UpdateMediaStatsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ingressHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressHandlerClient(cc grpc.ClientConnInterface) IngressHandlerClient {
	return &ingressHandlerClient{cc}
}

func (c *ingressHandlerClient) GetPProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfResponse, error) {
	out := new(PProfResponse)
	err := c.cc.Invoke(ctx, IngressHandler_GetPProf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressHandlerClient) UpdateMediaStats(ctx context.Context, in *UpdateMediaStatsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IngressHandler_UpdateMediaStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressHandlerServer is the server API for IngressHandler service.
// All implementations must embed UnimplementedIngressHandlerServer
// for forward compatibility
type IngressHandlerServer interface {
	GetPProf(context.Context, *PProfRequest) (*PProfResponse, error)
	UpdateMediaStats(context.Context, *UpdateMediaStatsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIngressHandlerServer()
}

// UnimplementedIngressHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedIngressHandlerServer struct {
}

func (UnimplementedIngressHandlerServer) GetPProf(context.Context, *PProfRequest) (*PProfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPProf not implemented")
}
func (UnimplementedIngressHandlerServer) UpdateMediaStats(context.Context, *UpdateMediaStatsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaStats not implemented")
}
func (UnimplementedIngressHandlerServer) mustEmbedUnimplementedIngressHandlerServer() {}

// UnsafeIngressHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressHandlerServer will
// result in compilation errors.
type UnsafeIngressHandlerServer interface {
	mustEmbedUnimplementedIngressHandlerServer()
}

func RegisterIngressHandlerServer(s grpc.ServiceRegistrar, srv IngressHandlerServer) {
	s.RegisterService(&IngressHandler_ServiceDesc, srv)
}

func _IngressHandler_GetPProf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PProfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressHandlerServer).GetPProf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressHandler_GetPProf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressHandlerServer).GetPProf(ctx, req.(*PProfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressHandler_UpdateMediaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressHandlerServer).UpdateMediaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressHandler_UpdateMediaStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressHandlerServer).UpdateMediaStats(ctx, req.(*UpdateMediaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngressHandler_ServiceDesc is the grpc.ServiceDesc for IngressHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngressHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.IngressHandler",
	HandlerType: (*IngressHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPProf",
			Handler:    _IngressHandler_GetPProf_Handler,
		},
		{
			MethodName: "UpdateMediaStats",
			Handler:    _IngressHandler_UpdateMediaStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc.proto",
}
